// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(14)
            {
                { typeof(global::MasterMemory.Tests.Sample), 0 },
                { typeof(global::MasterMemory.Tests.SkillMaster), 1 },
                { typeof(global::MasterMemory.Tests.TestStructures.Fail), 2 },
                { typeof(global::MasterMemory.Tests.TestStructures.ItemMaster), 3 },
                { typeof(global::MasterMemory.Tests.TestStructures.ItemMasterEmptyValidate), 4 },
                { typeof(global::MasterMemory.Tests.TestStructures.MyData), 5 },
                { typeof(global::MasterMemory.Tests.TestStructures.PersonModel), 6 },
                { typeof(global::MasterMemory.Tests.TestStructures.QuestMaster), 7 },
                { typeof(global::MasterMemory.Tests.TestStructures.QuestMasterEmptyValidate), 8 },
                { typeof(global::MasterMemory.Tests.TestStructures.SequentialCheckMaster), 9 },
                { typeof(global::MasterMemory.Tests.TestStructures.SingleMaster), 10 },
                { typeof(global::MasterMemory.Tests.TestStructures.TestMaster), 11 },
                { typeof(global::MasterMemory.Tests.UserLevel), 12 },
                { typeof(global::MyClass), 13 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.MasterMemory.Tests.SampleFormatter();
                case 1: return new MessagePack.Formatters.MasterMemory.Tests.SkillMasterFormatter();
                case 2: return new MessagePack.Formatters.MasterMemory.Tests.TestStructures.FailFormatter();
                case 3: return new MessagePack.Formatters.MasterMemory.Tests.TestStructures.ItemMasterFormatter();
                case 4: return new MessagePack.Formatters.MasterMemory.Tests.TestStructures.ItemMasterEmptyValidateFormatter();
                case 5: return new MessagePack.Formatters.MasterMemory.Tests.TestStructures.MyDataFormatter();
                case 6: return new MessagePack.Formatters.MasterMemory.Tests.TestStructures.PersonModelFormatter();
                case 7: return new MessagePack.Formatters.MasterMemory.Tests.TestStructures.QuestMasterFormatter();
                case 8: return new MessagePack.Formatters.MasterMemory.Tests.TestStructures.QuestMasterEmptyValidateFormatter();
                case 9: return new MessagePack.Formatters.MasterMemory.Tests.TestStructures.SequentialCheckMasterFormatter();
                case 10: return new MessagePack.Formatters.MasterMemory.Tests.TestStructures.SingleMasterFormatter();
                case 11: return new MessagePack.Formatters.MasterMemory.Tests.TestStructures.TestMasterFormatter();
                case 12: return new MessagePack.Formatters.MasterMemory.Tests.UserLevelFormatter();
                case 13: return new MessagePack.Formatters.MyClassFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.MasterMemory.Tests
{
    public sealed class SampleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.Sample>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Age
        private static global::System.ReadOnlySpan<byte> GetSpan_Age() => new byte[1 + 3] { 163, 65, 103, 101 };
        // FirstName
        private static global::System.ReadOnlySpan<byte> GetSpan_FirstName() => new byte[1 + 9] { 169, 70, 105, 114, 115, 116, 78, 97, 109, 101 };
        // LastName
        private static global::System.ReadOnlySpan<byte> GetSpan_LastName() => new byte[1 + 8] { 168, 76, 97, 115, 116, 78, 97, 109, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.Sample value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Id());
            writer.Write(value.Id);
            writer.WriteRaw(GetSpan_Age());
            writer.Write(value.Age);
            writer.WriteRaw(GetSpan_FirstName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.FirstName, options);
            writer.WriteRaw(GetSpan_LastName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.LastName, options);
        }

        public global::MasterMemory.Tests.Sample Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __Age__ = default(int);
            var __FirstName__ = default(string);
            var __LastName__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        __Id__ = reader.ReadInt32();
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6645569UL) { goto FAIL; }

                        __Age__ = reader.ReadInt32();
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_FirstName().Slice(1))) { goto FAIL; }

                        __FirstName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 8:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7308604759881245004UL) { goto FAIL; }

                        __LastName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::MasterMemory.Tests.Sample(__Id__, __Age__, __FirstName__, __LastName__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SkillMasterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.SkillMaster>
    {
        // SkillId
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillId() => new byte[1 + 7] { 167, 83, 107, 105, 108, 108, 73, 100 };
        // SkillLevel
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillLevel() => new byte[1 + 10] { 170, 83, 107, 105, 108, 108, 76, 101, 118, 101, 108 };
        // AttackPower
        private static global::System.ReadOnlySpan<byte> GetSpan_AttackPower() => new byte[1 + 11] { 171, 65, 116, 116, 97, 99, 107, 80, 111, 119, 101, 114 };
        // SkillName
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillName() => new byte[1 + 9] { 169, 83, 107, 105, 108, 108, 78, 97, 109, 101 };
        // Description
        private static global::System.ReadOnlySpan<byte> GetSpan_Description() => new byte[1 + 11] { 171, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.SkillMaster value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_SkillId());
            writer.Write(value.SkillId);
            writer.WriteRaw(GetSpan_SkillLevel());
            writer.Write(value.SkillLevel);
            writer.WriteRaw(GetSpan_AttackPower());
            writer.Write(value.AttackPower);
            writer.WriteRaw(GetSpan_SkillName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.SkillName, options);
            writer.WriteRaw(GetSpan_Description());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Description, options);
        }

        public global::MasterMemory.Tests.SkillMaster Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __SkillId__ = default(int);
            var __SkillLevel__ = default(int);
            var __AttackPower__ = default(int);
            var __SkillName__ = default(string);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228227695209299UL) { goto FAIL; }

                        __SkillId__ = reader.ReadInt32();
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SkillLevel().Slice(1))) { goto FAIL; }

                        __SkillLevel__ = reader.ReadInt32();
                        continue;
                    case 11:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8021029010927809601UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7497079UL) { goto FAIL; }

                                __AttackPower__ = reader.ReadInt32();
                                continue;

                            case 8390322045806929220UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7237481UL) { goto FAIL; }

                                __Description__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SkillName().Slice(1))) { goto FAIL; }

                        __SkillName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::MasterMemory.Tests.SkillMaster(__SkillId__, __SkillLevel__, __AttackPower__, __SkillName__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UserLevelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.UserLevel>
    {
        // Level
        private static global::System.ReadOnlySpan<byte> GetSpan_Level() => new byte[1 + 5] { 165, 76, 101, 118, 101, 108 };
        // Exp
        private static global::System.ReadOnlySpan<byte> GetSpan_Exp() => new byte[1 + 3] { 163, 69, 120, 112 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.UserLevel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Level());
            writer.Write(value.Level);
            writer.WriteRaw(GetSpan_Exp());
            writer.Write(value.Exp);
        }

        public global::MasterMemory.Tests.UserLevel Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var __Level__ = default(int);
            var __Exp__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 465558725964UL) { goto FAIL; }

                        __Level__ = reader.ReadInt32();
                        continue;
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7370821UL) { goto FAIL; }

                        __Exp__ = reader.ReadInt32();
                        continue;

                }
            }

            var ____result = new global::MasterMemory.Tests.UserLevel(__Level__, __Exp__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.MasterMemory.Tests.TestStructures
{
    public sealed class FailFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.TestStructures.Fail>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.TestStructures.Fail value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Id());
            writer.Write(value.Id);
        }

        public global::MasterMemory.Tests.TestStructures.Fail Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::MasterMemory.Tests.TestStructures.Fail();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ItemMasterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.TestStructures.ItemMaster>
    {
        // ItemId
        private static global::System.ReadOnlySpan<byte> GetSpan_ItemId() => new byte[1 + 6] { 166, 73, 116, 101, 109, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.TestStructures.ItemMaster value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_ItemId());
            writer.Write(value.ItemId);
        }

        public global::MasterMemory.Tests.TestStructures.ItemMaster Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::MasterMemory.Tests.TestStructures.ItemMaster();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266530755657UL) { goto FAIL; }

                        ____result.ItemId = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ItemMasterEmptyValidateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.TestStructures.ItemMasterEmptyValidate>
    {
        // ItemId
        private static global::System.ReadOnlySpan<byte> GetSpan_ItemId() => new byte[1 + 6] { 166, 73, 116, 101, 109, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.TestStructures.ItemMasterEmptyValidate value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_ItemId());
            writer.Write(value.ItemId);
        }

        public global::MasterMemory.Tests.TestStructures.ItemMasterEmptyValidate Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::MasterMemory.Tests.TestStructures.ItemMasterEmptyValidate();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 110266530755657UL) { goto FAIL; }

                        ____result.ItemId = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MyDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.TestStructures.MyData>
    {
        // LastName
        private static global::System.ReadOnlySpan<byte> GetSpan_LastName() => new byte[1 + 8] { 168, 76, 97, 115, 116, 78, 97, 109, 101 };
        // FirstName
        private static global::System.ReadOnlySpan<byte> GetSpan_FirstName() => new byte[1 + 9] { 169, 70, 105, 114, 115, 116, 78, 97, 109, 101 };
        // RandomId
        private static global::System.ReadOnlySpan<byte> GetSpan_RandomId() => new byte[1 + 8] { 168, 82, 97, 110, 100, 111, 109, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.TestStructures.MyData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_LastName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.LastName, options);
            writer.WriteRaw(GetSpan_FirstName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.FirstName, options);
            writer.WriteRaw(GetSpan_RandomId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RandomId, options);
        }

        public global::MasterMemory.Tests.TestStructures.MyData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::MasterMemory.Tests.TestStructures.MyData();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604759881245004UL:
                                ____result.LastName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7226427402286424402UL:
                                ____result.RandomId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_FirstName().Slice(1))) { goto FAIL; }

                        ____result.FirstName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PersonModelFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.TestStructures.PersonModel>
    {
        // LastName
        private static global::System.ReadOnlySpan<byte> GetSpan_LastName() => new byte[1 + 8] { 168, 76, 97, 115, 116, 78, 97, 109, 101 };
        // FirstName
        private static global::System.ReadOnlySpan<byte> GetSpan_FirstName() => new byte[1 + 9] { 169, 70, 105, 114, 115, 116, 78, 97, 109, 101 };
        // RandomId
        private static global::System.ReadOnlySpan<byte> GetSpan_RandomId() => new byte[1 + 8] { 168, 82, 97, 110, 100, 111, 109, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.TestStructures.PersonModel value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_LastName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.LastName, options);
            writer.WriteRaw(GetSpan_FirstName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.FirstName, options);
            writer.WriteRaw(GetSpan_RandomId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RandomId, options);
        }

        public global::MasterMemory.Tests.TestStructures.PersonModel Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::MasterMemory.Tests.TestStructures.PersonModel();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7308604759881245004UL:
                                ____result.LastName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 7226427402286424402UL:
                                ____result.RandomId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_FirstName().Slice(1))) { goto FAIL; }

                        ____result.FirstName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class QuestMasterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.TestStructures.QuestMaster>
    {
        // QuestId
        private static global::System.ReadOnlySpan<byte> GetSpan_QuestId() => new byte[1 + 7] { 167, 81, 117, 101, 115, 116, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // RewardItemId
        private static global::System.ReadOnlySpan<byte> GetSpan_RewardItemId() => new byte[1 + 12] { 172, 82, 101, 119, 97, 114, 100, 73, 116, 101, 109, 73, 100 };
        // Cost
        private static global::System.ReadOnlySpan<byte> GetSpan_Cost() => new byte[1 + 4] { 164, 67, 111, 115, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.TestStructures.QuestMaster value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_QuestId());
            writer.Write(value.QuestId);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_RewardItemId());
            writer.Write(value.RewardItemId);
            writer.WriteRaw(GetSpan_Cost());
            writer.Write(value.Cost);
        }

        public global::MasterMemory.Tests.TestStructures.QuestMaster Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::MasterMemory.Tests.TestStructures.QuestMaster();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228262172128593UL) { goto FAIL; }

                        ____result.QuestId = reader.ReadInt32();
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1953722179UL:
                                ____result.Cost = reader.ReadInt32();
                                continue;
                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RewardItemId().Slice(1))) { goto FAIL; }

                        ____result.RewardItemId = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class QuestMasterEmptyValidateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.TestStructures.QuestMasterEmptyValidate>
    {
        // QuestId
        private static global::System.ReadOnlySpan<byte> GetSpan_QuestId() => new byte[1 + 7] { 167, 81, 117, 101, 115, 116, 73, 100 };
        // Name
        private static global::System.ReadOnlySpan<byte> GetSpan_Name() => new byte[1 + 4] { 164, 78, 97, 109, 101 };
        // RewardItemId
        private static global::System.ReadOnlySpan<byte> GetSpan_RewardItemId() => new byte[1 + 12] { 172, 82, 101, 119, 97, 114, 100, 73, 116, 101, 109, 73, 100 };
        // Cost
        private static global::System.ReadOnlySpan<byte> GetSpan_Cost() => new byte[1 + 4] { 164, 67, 111, 115, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.TestStructures.QuestMasterEmptyValidate value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_QuestId());
            writer.Write(value.QuestId);
            writer.WriteRaw(GetSpan_Name());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.WriteRaw(GetSpan_RewardItemId());
            writer.Write(value.RewardItemId);
            writer.WriteRaw(GetSpan_Cost());
            writer.Write(value.Cost);
        }

        public global::MasterMemory.Tests.TestStructures.QuestMasterEmptyValidate Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::MasterMemory.Tests.TestStructures.QuestMasterEmptyValidate();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228262172128593UL) { goto FAIL; }

                        ____result.QuestId = reader.ReadInt32();
                        continue;
                    case 4:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 1701667150UL:
                                ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 1953722179UL:
                                ____result.Cost = reader.ReadInt32();
                                continue;
                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_RewardItemId().Slice(1))) { goto FAIL; }

                        ____result.RewardItemId = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SequentialCheckMasterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.TestStructures.SequentialCheckMaster>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // Cost
        private static global::System.ReadOnlySpan<byte> GetSpan_Cost() => new byte[1 + 4] { 164, 67, 111, 115, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.TestStructures.SequentialCheckMaster value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Id());
            writer.Write(value.Id);
            writer.WriteRaw(GetSpan_Cost());
            writer.Write(value.Cost);
        }

        public global::MasterMemory.Tests.TestStructures.SequentialCheckMaster Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::MasterMemory.Tests.TestStructures.SequentialCheckMaster();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = reader.ReadInt32();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1953722179UL) { goto FAIL; }

                        ____result.Cost = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SingleMasterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.TestStructures.SingleMaster>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.TestStructures.SingleMaster value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(1);
            writer.WriteRaw(GetSpan_Id());
            writer.Write(value.Id);
        }

        public global::MasterMemory.Tests.TestStructures.SingleMaster Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::MasterMemory.Tests.TestStructures.SingleMaster();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        ____result.Id = reader.ReadInt32();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TestMasterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MasterMemory.Tests.TestStructures.TestMaster>
    {
        // TestID
        private static global::System.ReadOnlySpan<byte> GetSpan_TestID() => new byte[1 + 6] { 166, 84, 101, 115, 116, 73, 68 };
        // Value
        private static global::System.ReadOnlySpan<byte> GetSpan_Value() => new byte[1 + 5] { 165, 86, 97, 108, 117, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MasterMemory.Tests.TestStructures.TestMaster value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_TestID());
            writer.Write(value.TestID);
            writer.WriteRaw(GetSpan_Value());
            writer.Write(value.Value);
        }

        public global::MasterMemory.Tests.TestStructures.TestMaster Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var __TestID__ = default(int);
            var __Value__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 75082277021012UL) { goto FAIL; }

                        __TestID__ = reader.ReadInt32();
                        continue;
                    case 5:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 435761733974UL) { goto FAIL; }

                        __Value__ = reader.ReadInt32();
                        continue;

                }
            }

            var ____result = new global::MasterMemory.Tests.TestStructures.TestMaster(__TestID__, __Value__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    public sealed class MyClassFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MyClass>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MyClass value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.Age);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.FirstName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.LastName, options);
        }

        public global::MyClass Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::MyClass();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Age = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.FirstName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.LastName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

