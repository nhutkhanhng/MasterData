// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Tests.TestStructures;
using MasterMemory.Tests;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Text;
using System;
using MasterData.Tables;

namespace MasterData
{
    public class MasterMemoryResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new MasterMemoryResolver();

        MasterMemoryResolver()
        {

        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.formatter;
        }

        static class FormatterCache<T>
        {
            public static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> formatter;

            static FormatterCache()
            {
                var f = MasterMemoryResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class MasterMemoryResolverGetFormatterHelper
    {
        static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static MasterMemoryResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(13)
            {
                {typeof(Fail[]), 0 },
                {typeof(ItemMaster[]), 1 },
                {typeof(ItemMasterEmptyValidate[]), 2 },
                {typeof(MyData[]), 3 },
                {typeof(PersonModel[]), 4 },
                {typeof(QuestMaster[]), 5 },
                {typeof(QuestMasterEmptyValidate[]), 6 },
                {typeof(Sample[]), 7 },
                {typeof(SequentialCheckMaster[]), 8 },
                {typeof(SingleMaster[]), 9 },
                {typeof(SkillMaster[]), 10 },
                {typeof(TestMaster[]), 11 },
                {typeof(UserLevel[]), 12 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key)) return null;

            switch (key)
            {
                case 0: return new MessagePack.Formatters.ArrayFormatter<Fail>();
                case 1: return new MessagePack.Formatters.ArrayFormatter<ItemMaster>();
                case 2: return new MessagePack.Formatters.ArrayFormatter<ItemMasterEmptyValidate>();
                case 3: return new MessagePack.Formatters.ArrayFormatter<MyData>();
                case 4: return new MessagePack.Formatters.ArrayFormatter<PersonModel>();
                case 5: return new MessagePack.Formatters.ArrayFormatter<QuestMaster>();
                case 6: return new MessagePack.Formatters.ArrayFormatter<QuestMasterEmptyValidate>();
                case 7: return new MessagePack.Formatters.ArrayFormatter<Sample>();
                case 8: return new MessagePack.Formatters.ArrayFormatter<SequentialCheckMaster>();
                case 9: return new MessagePack.Formatters.ArrayFormatter<SingleMaster>();
                case 10: return new MessagePack.Formatters.ArrayFormatter<SkillMaster>();
                case 11: return new MessagePack.Formatters.ArrayFormatter<TestMaster>();
                case 12: return new MessagePack.Formatters.ArrayFormatter<UserLevel>();
                default: return null;
            }
        }
    }
}